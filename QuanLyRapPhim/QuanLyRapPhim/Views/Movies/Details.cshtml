@model QuanLyRapPhim.Models.Movie

@{
    ViewData["Title"] = "Chi tiết phim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container my-5 position-relative">
  
    <div class="circle circle-1"></div>
    <div class="circle circle-2"></div>
    <div class="circle circle-3"></div>

    <h1 class="text-primary mb-4">Chi tiết phim: @Model.Title</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Thông tin phim -->
    <div class="row">
        <!-- Poster phim -->
        <div class="col-md-4">
            <img src="@Model.Poster" class="img-fluid rounded shadow movie-poster" alt="@Model.Title" />
        </div>

        <!-- Thông tin chi tiết phim -->
        <div class="col-md-8">
            <div class="card movie-card text-light">
                <div class="card-body">
                    <h3 class="mb-3">@Model.Title</h3>
                    <p><strong>Mô tả:</strong> @Model.Description</p>
                    <p><strong>Thể loại:</strong> @Model.Genre</p>
                    <p><strong>Đạo diễn:</strong> @Model.Director</p>
                    <p><strong>Diễn viên:</strong> @Model.Actors</p>
                    <p><strong>Thời lượng:</strong> @Model.Duration phút</p>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-back">
                        ⏪ Quay lại danh sách
                    </a>
                    <div>
                        <a asp-controller="Showtimes" asp-action="SelectShowtime" asp-route-movieId="@Model.MovieId" class="btn btn-primary">Đặt vé</a>
                        @if (User.IsInRole("Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@Model.MovieId" class="btn btn-warning">Sửa</a>
                            <a asp-action="Delete" asp-route-id="@Model.MovieId" class="btn btn-danger">Xóa</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Form thêm nhận xét -->
    <div class="mt-5">
        <h4 class="text-primary">Viết nhận xét</h4>
        @if (User.Identity.IsAuthenticated)
        {
            // Kiểm tra xem user đã có đánh giá chưa
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var existingReview = Model.Reviews.FirstOrDefault(r => r.UserId == userId);

            @if (existingReview == null)
            {
                // Nếu user chưa đánh giá, hiển thị form
                <form asp-action="AddReview" method="post">
                    <input type="hidden" name="movieId" value="@Model.MovieId" />
                    <div class="form-group mb-3">
                        <label for="comment" class="text-white">Nhận xét:</label>
                        <textarea name="comment" id="comment" class="form-control" rows="3" required maxlength="500"></textarea>
                    </div>
                    <div class="form-group mb-3">
                        <label class="text-white">Đánh giá (1-5):</label>
                        <div class="star-rating">
                            <span class="fa fa-star" data-value="1"></span>
                            <span class="fa fa-star" data-value="2"></span>
                            <span class="fa fa-star" data-value="3"></span>
                            <span class="fa fa-star" data-value="4"></span>
                            <span class="fa fa-star" data-value="5"></span>
                        </div>
                        <input type="hidden" name="rating" id="rating" value="0" required />
                        <div class="text-danger" id="rating-error" style="display: none;">Vui lòng chọn số sao để đánh giá.</div>
                    </div>
                    <button type="submit" class="btn btn-primary">Gửi nhận xét</button>
                </form>
            }
            else
            {
                // Nếu user đã đánh giá, hiển thị thông báo
                <p class="text-warning">Bạn đã đánh giá phim này rồi. Mỗi người dùng chỉ được đánh giá một lần.</p>
            }
        }
        else
        {
            <p class="text-white">Vui lòng <a href="/Identity/Account/Login">đăng nhập</a> để viết nhận xét.</p>
        }
    </div>

    <!-- Danh sách nhận xét -->
    <div class="mt-5">
        <h4 class="text-primary">Nhận xét từ người dùng</h4>
        @if (Model.Reviews.Any())
        {
            <div class="list-group">
                @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                {
                    <div class="list-group-item mb-3 movie-card text-light">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@review.User.UserName</h5>
                            <small>@review.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        </div>
                        <p class="mb-1">@review.Comment</p>
                        <small>
                            Đánh giá:
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= review.Rating)
                                {
                                    <span class="fa fa-star text-warning"></span>
                                }
                                else
                                {
                                    <span class="fa fa-star text-muted"></span>
                                }
                            }
                        </small>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-white">Chưa có nhận xét nào cho phim này.</p>
        }
    </div>
</div>

<!-- CSS tùy chỉnh -->
<style>
    body {
        background: linear-gradient(135deg, #ff9a8b 0%, #ff6a88 50%, #6b48ff 100%);
        font-family: 'Arial', sans-serif;
        color: #fff;
    }

    .container {
        padding-top: 20px;
        padding-bottom: 20px;
    }

    .circle {
        position: absolute;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff9a8b 0%, #ff6a88 50%, #6b48ff 100%);
        opacity: 0.3;
    }

    .circle-1 {
        width: 300px;
        height: 300px;
        top: -50px;
        left: -50px;
    }

    .circle-2 {
        width: 200px;
        height: 200px;
        bottom: -50px;
        left: 50px;
    }

    .circle-3 {
        width: 150px;
        height: 150px;
        top: 50%;
        left: 20%;
    }

    .movie-card {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        border: none;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .movie-poster {
        border-radius: 15px;
        max-height: 500px;
        object-fit: cover;
    }

    .text-primary {
        color: #fff;
        font-weight: bold;
    }

    .btn-back {
        background: linear-gradient(90deg, #4e54c8 0%, #8f94fb 100%);
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        transition: transform 0.3s ease, background 0.3s ease;
        display: flex;
        align-items: center;
        gap: 5px;
        font-weight: bold;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

        .btn-back:hover {
            background: linear-gradient(90deg, #8f94fb 0%, #4e54c8 100%);
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
        }

    .btn-primary {
        background: linear-gradient(90deg, #ff6a88 0%, #6b48ff 100%);
        color: #fff;
        border: none;
        border-radius: 8px;
        transition: background 0.3s ease;
    }

        .btn-primary:hover {
            background: linear-gradient(90deg, #ff6a88 50%, #6b48ff 100%);
            transform: scale(1.05);
        }

    .btn-warning {
        background-color: #ffca28;
        color: #000;
    }

        .btn-warning:hover {
            background-color: #ffb300;
        }

    .btn-danger {
        background-color: #ff4444;
        color: #fff;
    }

        .btn-danger:hover {
            background-color: #cc0000;
        }

    .list-group-item {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 10px;
    }

    /* CSS cho phần đánh giá sao */
    .star-rating {
        font-size: 1.5rem;
        cursor: pointer;
    }

        .star-rating .fa-star {
            color: #ccc; /* Màu mặc định của sao (xám) */
            transition: color 0.2s;
        }

            .star-rating .fa-star.checked {
                color: #ffca28; /* Màu vàng khi được chọn */
            }

            .star-rating .fa-star:hover,
            .star-rating .fa-star:hover ~ .fa-star {
                color: #ffca28; /* Màu vàng khi hover */
            }
</style>

<!-- JavaScript để xử lý chọn sao -->
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const stars = document.querySelectorAll('.star-rating .fa-star');
            const ratingInput = document.getElementById('rating');
            const ratingError = document.getElementById('rating-error');

            // Khởi tạo trạng thái sao dựa trên giá trị ban đầu (nếu user đã đánh giá)
            const initialRating = parseInt(ratingInput?.value || 0);
            if (initialRating > 0) {
                for (let i = 0; i < initialRating; i++) {
                    stars[i].classList.add('checked');
                }
            }

            stars.forEach(star => {
                star.addEventListener('click', function () {
                    const value = this.getAttribute('data-value');
                    ratingInput.value = value;

                    // Xóa class checked từ tất cả các sao
                    stars.forEach(s => s.classList.remove('checked'));

                    // Thêm class checked cho các sao từ 1 đến sao được chọn
                    for (let i = 0; i < value; i++) {
                        stars[i].classList.add('checked');
                    }

                    // Ẩn thông báo lỗi nếu có
                    ratingError.style.display = 'none';
                });

                // Hover effect
                star.addEventListener('mouseover', function () {
                    const value = this.getAttribute('data-value');
                    for (let i = 0; i < value; i++) {
                        stars[i].classList.add('checked');
                    }
                });

                star.addEventListener('mouseout', function () {
                    const currentValue = ratingInput.value;
                    stars.forEach(s => s.classList.remove('checked'));
                    for (let i = 0; i < currentValue; i++) {
                        stars[i].classList.add('checked');
                    }
                });
            });

            // Validation khi submit form
            document.querySelector('form')?.addEventListener('submit', function (e) {
                if (ratingInput.value == '0') {
                    e.preventDefault();
                    ratingError.style.display = 'block';
                }
            });
        });
    </script>
}