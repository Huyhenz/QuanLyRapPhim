@model QuanLyRapPhim.Models.Movie

@{
    ViewData["Title"] = "Chi tiết phim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid d-flex flex-column position-relative">
    <!-- Khung bao quanh -->
    <div class="frame-wrapper flex-grow-1">
        <h1 class="text-white mb-4">Chi tiết phim: @Model.Title</h1>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show glow-effect" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show glow-effect" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Thông tin phim -->
        <div class="row">
            <!-- Poster phim -->
            <div class="col-md-6">
                @if (!string.IsNullOrEmpty(Model.Poster))
                {
                    <img src="@Model.Poster" class="img-fluid rounded shadow movie-poster glow-effect" alt="@Model.Title" />
                }
                else
                {
                    <div class="text-center text-muted mb-3" style="height: 500px; line-height: 500px;">Không có poster</div>
                }
            </div>

            <!-- Thông tin chi tiết phim -->
            <div class="col-md-6">
                <div class="card movie-card text-light">
                    <div class="card-body">
                        <h3 class="mb-3">@Model.Title</h3>
                        <p><strong>Mô tả:</strong> @Model.Description</p>
                        <p><strong>Thể loại:</strong> @Model.Genre</p>
                        <p><strong>Đạo diễn:</strong> @Model.Director</p>
                        <p><strong>Diễn viên:</strong> @Model.Actors</p>
                        <p><strong>Thời lượng:</strong> @Model.Duration phút</p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-back">
                            ⏪ Quay lại danh sách
                        </a>
                        <div>
                            <a asp-controller="Showtimes" asp-action="Index" asp-route-movieId="@Model.MovieId" class="btn btn-create">Đặt vé</a>
                            @if (User.IsInRole("Admin"))
                            {
                                <a asp-action="Edit" asp-route-id="@Model.MovieId" class="btn btn-warning">Sửa</a>
                                <a asp-action="Delete" asp-route-id="@Model.MovieId" class="btn btn-danger">Xóa</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Trailer Section -->
        @if (!string.IsNullOrEmpty(Model.TrailerUrl))
        {
            // Convert YouTube URL to embed format
            var videoId = "";
            if (Model.TrailerUrl.Contains("youtube.com/watch?v="))
            {
                videoId = Model.TrailerUrl.Split("v=")[1];
                var ampersandPosition = videoId.IndexOf('&');
                if (ampersandPosition != -1)
                {
                    videoId = videoId.Substring(0, ampersandPosition);
                }
            }
            else if (Model.TrailerUrl.Contains("youtu.be/"))
            {
                videoId = Model.TrailerUrl.Split("youtu.be/")[1];
                var questionMarkPosition = videoId.IndexOf('?');
                if (questionMarkPosition != -1)
                {
                    videoId = videoId.Substring(0, questionMarkPosition);
                }
            }

            if (!string.IsNullOrEmpty(videoId))
            {
                <div class="mt-5 mb-5 trailer-section">
                    <h4 class="text-white mb-3">Trailer</h4>
                    <div class="embed-responsive embed-responsive-16by9 movie-card glow-effect">
                        <iframe class="embed-responsive-item"
                                src="https://www.youtube.com/embed/@videoId"
                                title="Trailer phim @Model.Title"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen></iframe>
                    </div>
                </div>
            }
            else
            {
                <div class="mt-5 mb-5 trailer-section">
                    <h4 class="text-white mb-3">Trailer</h4>
                    <p class="text-muted">Không thể hiển thị trailer: Link không hợp lệ.</p>
                </div>
            }
        }

        <!-- Form thêm nhận xét -->
        <div class="mt-5 review-section">
            <h4 class="text-white mb-3">Viết nhận xét</h4>
            @if (User.Identity.IsAuthenticated)
            {
                var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                var existingReview = Model.Reviews.FirstOrDefault(r => r.UserId == userId);

                @if (existingReview == null)
                {
                    <form asp-action="AddReview" method="post">
                        <input type="hidden" name="movieId" value="@Model.MovieId" />
                        <div class="form-group mb-3">
                            <label for="comment" class="text-white">Nhận xét:</label>
                            <textarea name="comment" id="comment" class="form-control" rows="3" required maxlength="500"></textarea>
                        </div>
                        <div class="form-group mb-3">
                            <label class="text-white">Đánh giá (1-5):</label>
                            <div class="star-rating">
                                <span class="fa fa-star" data-value="1"></span>
                                <span class="fa fa-star" data-value="2"></span>
                                <span class="fa fa-star" data-value="3"></span>
                                <span class="fa fa-star" data-value="4"></span>
                                <span class="fa fa-star" data-value="5"></span>
                            </div>
                            <input type="hidden" name="rating" id="rating" value="0" required />
                            <div class="text-danger" id="rating-error" style="display: none;">Vui lòng chọn số sao để đánh giá.</div>
                        </div>
                        <button type="submit" class="btn btn-create">Gửi nhận xét</button>
                    </form>
                }
                else
                {
                    <p class="text-warning">Bạn đã đánh giá phim này rồi. Mỗi người dùng chỉ được đánh giá một lần.</p>
                }
            }
            else
            {
                <p class="text-white">Vui lòng <a href="/Identity/Account/Login">đăng nhập</a> để viết nhận xét.</p>
            }
        </div>

        <!-- Danh sách nhận xét -->
        <div class="mt-5 review-section">
            <h4 class="text-white mb-3">Nhận xét từ người dùng</h4>
            @if (Model.Reviews.Any())
            {
                <div class="list-group">
                    @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                    {
                        <div class="list-group-item mb-3 movie-card text-light">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">@review.User.UserName</h5>
                                <small>@review.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                            <p class="mb-1">@review.Comment</p>
                            <small>
                                Đánh giá:
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= review.Rating)
                                    {
                                        <span class="fa fa-star text-warning"></span>
                                    }
                                    else
                                    {
                                        <span class="fa fa-star text-muted"></span>
                                    }
                                }
                            </small>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-white">Chưa có nhận xét nào cho phim này.</p>
            }
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer text-center py-3">
        <p class="text-white mb-0">© 2025 CinemaX. All rights reserved. | Last updated: 01:31 AM +07, May 27, 2025</p>
    </footer>
</div>

<!-- CSS tùy chỉnh -->
<style>
    body {
        background-color: #0F0F0F; /* Đen */
        margin: 0;
        font-family: 'Montserrat', sans-serif;
        overflow: auto; /* Cho phép cuộn tự nhiên */
    }

    .container-fluid {
        display: flex;
        width: 100%;
        min-height: 100vh;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        padding: 20px 0;
    }

    /* Khung bao quanh */
    .frame-wrapper {
        display: flex;
        flex-direction: column;
        width: 90%;
        max-width: 1200px;
        background: #2e2e2e; /* Nền xám tối */
        border-radius: 20px;
        border: 4px solid #2e2e2e; /* Viền cùng màu nền */
        box-shadow: 0 0 25px rgba(46, 46, 46, 0.5);
        padding: 20px;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: 0 -10px;
        height: auto; /* Xóa chiều cao cố định */
    }

    .col-md-6 {
        flex: 0 0 50%; /* 50% width for both columns */
        max-width: 50%;
        padding: 0 10px;
    }

    h1 {
        font-size: 2rem;
        font-weight: 700;
        text-transform: uppercase;
        background: linear-gradient(90deg, #ff0033 0%, #e50914 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 20px;
    }

    .movie-card {
        background: #1c1c1c;
        border-radius: 15px;
        border: 1px solid transparent;
        background-image: linear-gradient(rgba(28, 28, 28, 0.9), rgba(28, 28, 28, 0.9)), linear-gradient(45deg, #e50914, #0F0F0F);
        background-origin: border-box;
        background-clip: padding-box, border-box;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        transition: transform 0.3s ease;
    }

        .movie-card:hover {
            transform: translateY(-5px);
        }

    .movie-poster {
        border-radius: 15px;
        max-height: 500px; /* Giữ nguyên để vừa khung */
        object-fit: cover;
        width: 100%;
    }

    .card-body, .list-group-item {
        padding: 20px;
    }

    .card-footer {
        background: transparent;
        padding: 15px;
        border-top: 1px solid #444;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        font-size: 0.9rem;
        font-weight: 500;
        color: #ffffff;
        margin-bottom: 5px;
    }

    .form-control, .form-control:focus {
        border-radius: 8px;
        padding: 12px 15px;
        font-size: 16px;
        border: 1px solid #cc0022;
        background: #2a2a2a;
        color: #ffffff;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .form-control:focus {
            border-color: #ff0033;
            box-shadow: 0 0 10px rgba(255, 0, 51, 0.5);
            background: #333;
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

    .btn-back {
        background: linear-gradient(90deg, #ff0033 0%, #e50914 100%);
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        transition: transform 0.3s ease, background 0.3s ease;
        display: flex;
        align-items: center;
        gap: 5px;
        font-weight: bold;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

        .btn-back:hover {
            background: linear-gradient(90deg, #e6002e 0%, #d30912 100%);
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
        }

    .btn-create {
        background: linear-gradient(90deg, #ff0033 0%, #e50914 100%);
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
        color: #ffffff;
        font-weight: 600;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .btn-create:hover {
            background: linear-gradient(90deg, #e6002e 0%, #d30912 100%);
            transform: translateY(-2px);
        }

    .btn-warning {
        background-color: #ffca28;
        color: #000;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        margin-left: 5px;
    }

        .btn-warning:hover {
            background-color: #ffb300;
        }

    .btn-danger {
        background-color: #ff4444;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        margin-left: 5px;
    }

        .btn-danger:hover {
            background-color: #cc0000;
        }

    .text-danger {
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .star-rating {
        font-size: 1.5rem;
        cursor: pointer;
        display: flex;
        gap: 5px;
    }

        .star-rating .fa-star {
            color: #ccc; /* Màu mặc định của sao (xám) */
            transition: color 0.2s;
        }

            .star-rating .fa-star.checked {
                color: #ffca28; /* Màu vàng khi được chọn */
            }

            .star-rating .fa-star:hover,
            .star-rating .fa-star:hover ~ .fa-star {
                color: #ffca28; /* Màu vàng khi hover */
            }

    /* Trailer section */
    .trailer-section {
        width: 100%;
        margin-bottom: 40px; /* Thêm khoảng cách dưới */
    }

    .embed-responsive {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
        height: 0;
        overflow: hidden;
        max-width: 100%;
        background: #1c1c1c;
    }

        .embed-responsive iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }

    /* Review sections */
    .review-section {
        width: 100%;
        margin-bottom: 40px; /* Thêm khoảng cách dưới */
    }

    /* Footer */
    .footer {
        background: #1a1a1a;
        border-top: 1px solid #2e2e2e;
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        border-radius: 0 0 20px 20px;
    }

        .footer p {
            font-size: 12px;
            color: #cccccc;
        }

    /* Hiệu ứng sáng (glow) */
    .glow-effect {
        box-shadow: 0 0 15px rgba(255, 0, 51, 0.3);
        transition: box-shadow 0.3s ease;
    }

        .glow-effect:hover {
            box-shadow: 0 0 25px rgba(255, 0, 51, 0.5);
        }
</style>

<!-- JavaScript để xử lý chọn sao -->
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const stars = document.querySelectorAll('.star-rating .fa-star');
            const ratingInput = document.getElementById('rating');
            const ratingError = document.getElementById('rating-error');

            const initialRating = parseInt(ratingInput?.value || 0);
            if (initialRating > 0) {
                for (let i = 0; i < initialRating; i++) {
                    stars[i].classList.add('checked');
                }
            }

            stars.forEach(star => {
                star.addEventListener('click', function () {
                    const value = this.getAttribute('data-value');
                    ratingInput.value = value;

                    stars.forEach(s => s.classList.remove('checked'));

                    for (let i = 0; i < value; i++) {
                        stars[i].classList.add('checked');
                    }

                    ratingError.style.display = 'none';
                });

                star.addEventListener('mouseover', function () {
                    const value = this.getAttribute('data-value');
                    for (let i = 0; i < value; i++) {
                        stars[i].classList.add('checked');
                    }
                });

                star.addEventListener('mouseout', function () {
                    const currentValue = ratingInput.value;
                    stars.forEach(s => s.classList.remove('checked'));
                    for (let i = 0; i < currentValue; i++) {
                        stars[i].classList.add('checked');
                    }
                });
            });

            document.querySelector('form')?.addEventListener('submit', function (e) {
                if (ratingInput.value == '0') {
                    e.preventDefault();
                    ratingError.style.display = 'block';
                }
            });
        });
    </script>
}